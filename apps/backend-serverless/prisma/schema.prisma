generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum TransactionType {
  payment
  refund
}

enum PaymentRecordStatus {
  pending
  paid
  completed
  rejected
}

enum PaymentRecordRejectionReason {
  dependencySafetyReason
  customerSafetyReason
  internalServerReason
  unknownReason
}

enum RefundRecordStatus {
  pending
  paid
  completed
  rejected
}

enum KybState {
  incomplete
  pending
  failed
  finished
}

enum LoyaltyProgram {
  none
  points
  tiers
}

enum ProductStatus {
  tree
  collection
  ready
}

// Core merchant data model
model Merchant {
  id                         String          @id // Autogenerated ID
  shop                       String          @unique // Shopify Merchant Id
  name                       String? // Display Name
  email                      String?
  accessToken                String? // Shopify Access Token
  scopes                     String? // Most Recent Shopify Scopes
  lastNonce                  String // Most Recent Auth Nonce
  paymentRecords             PaymentRecord[]
  refundRecords              RefundRecord[]
  walletAddress              String? // Destination for funds
  tokenAddress               String? // USDC destination for funds
  kybInquiry                 String? // KYB Inquiry ID
  kybState                   KybState        @default(incomplete)
  active                     Boolean         @default(false)
  acceptedTermsAndConditions Boolean         @default(false)
  acceptedPrivacyPolicy      Boolean         @default(false)
  dismissCompleted           Boolean         @default(false) // flag for dismissing completed message

  loyaltyProgram LoyaltyProgram @default(none)
  pointsBack     Float?
  productStatus  ProductStatus  @default(tree)
  products       Product[]
  tiers          Tier[]
  customer       Customer[]
}

// Initial payment record created when a customer pays with Solana Pay at checkout
model PaymentRecord {
  id                   String                        @id // Internal unique id
  status               PaymentRecordStatus // tracks the progress of a payment
  shopId               String                        @unique // 'id' value passed to us from shopify
  shopGid              String // 'gid' value passed to us from shopify
  shopGroup            String // 'group' value passed to us from shopify
  test                 Boolean // payment is just for merchant testing
  amount               Float // how much fiat the payment was for in the currency specified
  currency             String // currency that the amount specifies
  usdcAmount           Float // amount and currency converted to USDC price
  cancelURL            String // location to send the customer if they cancel
  transactions         TransactionRecord[]
  merchant             Merchant                      @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  merchantId           String
  transactionSignature String? // links the payment to the transaction that paid it
  redirectUrl          String?
  requestedAt          DateTime                      @default(now())
  completedAt          DateTime?
  refundRecord         RefundRecord[]
  rejectionReason      PaymentRecordRejectionReason?
  websocketSessions    WebsocketSession[]

  @@index(merchantId)
}

// Refund record created when a merchant refunds a customer from shopify portal
model RefundRecord {
  id                   String              @id // Internal unique id
  status               RefundRecordStatus // tracks the progress of a refund
  amount               Float // how much fiat the refund was for in the currency specified
  currency             String // currency that the amount specifies
  usdcAmount           Float // amount and currency converted to USDC price
  shopId               String // 'id' value passed to us from shopify
  shopGid              String // 'gid' value passed to us from shopify
  shopPaymentId        String // 'payment_id' value passed to us from shopify
  paymentRecord        PaymentRecord       @relation(fields: [shopPaymentId], references: [shopId])
  test                 Boolean // refund is just for merchant testing
  merchant             Merchant            @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  merchantId           String
  transactionSignature String? // links the refund to the transaction that paid it
  TransactionRecord    TransactionRecord[]
  requestedAt          DateTime            @default(now())
  completedAt          DateTime?

  @@index(merchantId)
  @@index(shopPaymentId)
}

// Transaction record created when a customer submits onchain transaction
model TransactionRecord {
  id              Int             @id @default(autoincrement()) // Autogenerated ID
  signature       String          @unique // Transaction Signature
  type            TransactionType // 'payment' or 'refund'
  paymentRecord   PaymentRecord?  @relation(fields: [paymentRecordId], references: [id]) // links the transaction to the payment
  paymentRecordId String?
  refundRecord    RefundRecord?   @relation(fields: [refundRecordId], references: [id]) // links the transaction to the refund
  refundRecordId  String?
  createdAt       DateTime        @default(now()) // timestamp the transaction was built and signed
  paidWithPoints  Boolean         @default(false)

  @@index(paymentRecordId)
  @@index(refundRecordId)
}

model GDPR {
  id         Int     @id @default(autoincrement())
  merchantId String
  completed  Boolean
}

model WebsocketSession {
  id              Int            @id @default(autoincrement())
  connectionId    String         @unique
  paymentRecord   PaymentRecord? @relation(fields: [paymentRecordId], references: [id])
  paymentRecordId String

  @@index(paymentRecordId)
}

// Details about a merchant's product listings
model Product {
  id         String   @id
  name       String
  image      String? // shopify product image url
  active     Boolean  @default(false)
  merchant   Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  merchantId String
  uri        String? // arweave uploaded uri

  @@index(merchantId)
}

// Details about a merchant's tier loyalty program
model Tier {
  id         Int      @id @default(autoincrement())
  name       String
  threshold  Float // $ spending amount to be awarded tier
  discount   Float
  active     Boolean  @default(true) // if false, tier is not awarded or counted towards discounts
  merchant   Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  merchantId String
  mint       String?

  @@index([name, merchantId], name: "name_merchantId") // Unique index on `name` and `merchantId`
  @@index(merchantId)
}

// Customer spending info to award tiers
model Customer {
  customerWalletAddress String
  amountSpent           Float    @default(0) // needed to track spending for Tier awards
  merchant              Merchant @relation(fields: [merchantId], references: [id])
  merchantId            String

  @@id([merchantId, customerWalletAddress]) // Composite key on merchantId and customerWalletAddress
  @@unique([merchantId, customerWalletAddress]) // Unique constraint on the same fields
}

// Auto populated by shopify webhook to listen to customer purchases, needed to award unique product NFTs
model Checkout {
  id            Int      @id @default(autoincrement())
  checkoutToken String   @unique // Shopify Checkout session token
  productIds    String // products being purchased by customer
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
